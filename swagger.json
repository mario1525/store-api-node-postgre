{
  "openapi": "3.0.3",
  "info": {
    "title": "bike center",
    "description": "esta es una api de una tienda online para una tienda de productos de siclismo.",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "mbeltran4892@gmail.com"
    },
    "license": {
      "name": "ISC",
      "url": "https://opensource.org/license/isc-license-txt/"
    },
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "https://localhost/api/v1"
    }
  ],
  "tags": [
    {
      "name": "Customer",
      "description": "Operaciones relacionadas con los clientes de la tienda online"
    },
    {
      "name": "User",
      "description": "Operaciones relacionadas con los usuarios de la tienda online"
    },
    {
      "name": "Product",
      "description": "Operaciones relacionadas con los productos de la tienda online"
    },
    {
      "name": "Category",
      "description": "Operaciones relacionadas con las categorías de productos de la tienda online"
    },
    {
      "name": "Order",
      "description": "Operaciones relacionadas con las órdenes de compra de la tienda online"
    }
  ],
  "paths": {
    "/customer": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Obtiene todos los clientes",
        "description": "Retorna una lista de todos los clientes registrados.",
        "responses": {
          "200": {
            "description": "Lista de clientes obtenida correctamente."
          }
        }
      },
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Crea un nuevo cliente",
        "description": "Crea un nuevo cliente en la tienda online.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Datos del cliente a crear.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Cliente creado correctamente."
          }
        }
      }
    },
    "/customer/{id}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Obtiene un cliente específico",
        "description": "Retorna los detalles de un cliente específico.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID del cliente a obtener.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Cliente obtenido correctamente."
          },
          "404": {
            "description": "Cliente no encontrado."
          }
        }
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Actualiza un cliente existente",
        "description": "Actualiza los datos de un cliente existente.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID del cliente a actualizar.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Nuevos datos del cliente.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cliente actualizado correctamente."
          },
          "404": {
            "description": "Cliente no encontrado."
          }
        }
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Elimina un cliente existente",
        "description": "Elimina un cliente existente de la tienda online.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID del cliente a eliminar.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Cliente eliminado correctamente."
          },
          "404": {
            "description": "Cliente no encontrado."
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Obtiene todos los usuarios",
        "description": "Retorna una lista de todos los usuarios registrados.",
        "responses": {
          "200": {
            "description": "Lista de usuarios obtenida correctamente."
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Crea un nuevo usuario",
        "description": "Crea un nuevo usuario en la tienda online.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Datos del usuario a crear.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Usuario creado correctamente."
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Obtiene un usuario específico",
        "description": "Retorna los detalles de un usuario específico.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID del usuario a obtener.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Usuario obtenido correctamente."
          },
          "404": {
            "description": "Usuario no encontrado."
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Actualiza un usuario existente",
        "description": "Actualiza los datos de un usuario existente.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID del usuario a actualizar.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Nuevos datos del usuario.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Usuario actualizado correctamente."
          },
          "404": {
            "description": "Usuario no encontrado."
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Elimina un usuario existente",
        "description": "Elimina un usuario existente de la tienda online.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID del usuario a eliminar.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Usuario eliminado correctamente."
          },
          "404": {
            "description": "Usuario no encontrado."
          }
        }
      }
    },
    "/product": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Obtiene todos los productos",
        "description": "Retorna una lista de todos los productos disponibles.",
        "responses": {
          "200": {
            "description": "Lista de productos obtenida correctamente."
          }
        }
      },
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Crea un nuevo producto",
        "description": "Crea un nuevo producto en la tienda online.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Datos del producto a crear.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Producto creado correctamente."
          }
        }
      },
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Actualiza un producto existente",
        "description": "Actualiza los datos de un producto existente.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID del producto a actualizar.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Nuevos datos del producto.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Producto actualizado correctamente."
          },
          "404": {
            "description": "Producto no encontrado."
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Elimina un producto existente",
        "description": "Elimina un producto existente de la tienda online.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID del producto a eliminar.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Producto eliminado correctamente."
          },
          "404": {
            "description": "Producto no encontrado."
          }
        }
      }
    },
    "/category": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Obtiene todas las categorías",
        "description": "Retorna una lista de todas las categorías disponibles.",
        "responses": {
          "200": {
            "description": "Lista de categorías obtenida correctamente."
          }
        }
      },
      "post": {
        "tags": [
          "Category"
        ],
        "summary": "Crea una nueva categoría",
        "description": "Crea una nueva categoría en la tienda online.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Datos de la categoría a crear.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CategoryInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Categoría creada correctamente."
          }
        }
      },
      "put": {
        "tags": [
          "Category"
        ],
        "summary": "Actualiza una categoría existente",
        "description": "Actualiza los datos de una categoría existente.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID de la categoría a actualizar.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Nuevos datos de la categoría.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CategoryInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Categoría actualizada correctamente."
          },
          "404": {
            "description": "Categoría no encontrada."
          }
        }
      },
      "delete": {
        "tags": [
          "Category"
        ],
        "summary": "Elimina una categoría existente",
        "description": "Elimina una categoría existente de la tienda online.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID de la categoría a eliminar.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Categoría eliminada correctamente."
          },
          "404": {
            "description": "Categoría no encontrada."
          }
        }
      }
    },
    "/order": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Obtiene todas las órdenes",
        "description": "Retorna una lista de todas las órdenes realizadas.",
        "responses": {
          "200": {
            "description": "Lista de órdenes obtenida correctamente."
          }
        }
      },
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Crea una nueva orden",
        "description": "Crea una nueva orden en la tienda online.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Datos de la orden a crear.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Orden creada correctamente."
          }
        }
      },
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Actualiza una orden existente",
        "description": "Actualiza los datos de una orden existente.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID de la orden a actualizar.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Nuevos datos de la orden.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Orden actualizada correctamente."
          },
          "404": {
            "description": "Orden no encontrada."
          }
        }
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Elimina una orden existente",
        "description": "Elimina una orden existente de la tienda online.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID de la orden a eliminar.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Orden eliminada correctamente."
          },
          "404": {
            "description": "Orden no encontrada."
          }
        }
      }
    },
    "definitions": null,
    "CustomerInput": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "address": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "email"
      ]
    },
    "UserInput": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "email",
        "password"
      ]
    },
    "ProductInput": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "price": {
          "type": "number"
        }
      },
      "required": [
        "name",
        "price"
      ]
    },
    "CategoryInput": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "OrderInput": {
      "type": "object",
      "properties": {
        "customer": {
          "type": "string"
        },
        "products": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "total": {
          "type": "number"
        }
      },
      "required": [
        "customer",
        "products",
        "total"
      ]
    }
  },
  "components": {
    "schemas": {
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "petId": {
            "type": "integer",
            "format": "int64",
            "example": 198772
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "example": 7
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "example": "approved",
            "enum": [
              "placed",
              "approved",
              "delivered"
            ]
          },
          "complete": {
            "type": "boolean"
          }
        },
        "xml": {
          "name": "order"
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 100000
          },
          "username": {
            "type": "string",
            "example": "fehguy"
          },
          "address": {
            "type": "array",
            "xml": {
              "name": "addresses",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          }
        },
        "xml": {
          "name": "customer"
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "example": "437 Lytton"
          },
          "city": {
            "type": "string",
            "example": "Palo Alto"
          },
          "state": {
            "type": "string",
            "example": "CA"
          },
          "zip": {
            "type": "string",
            "example": "94301"
          }
        },
        "xml": {
          "name": "address"
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Dogs"
          }
        },
        "xml": {
          "name": "category"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "username": {
            "type": "string",
            "example": "theUser"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "James"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345"
          },
          "phone": {
            "type": "string",
            "example": "12345"
          },
          "userStatus": {
            "type": "integer",
            "description": "User Status",
            "format": "int32",
            "example": 1
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "tag"
        }
      },
      "Pet": {
        "required": [
          "name",
          "photoUrls"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "string",
              "xml": {
                "name": "photoUrl"
              }
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          }
        },
        "xml": {
          "name": "pet"
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "xml": {
          "name": "##default"
        }
      }
    },
    "requestBodies": {
      "Pet": {
        "description": "Pet object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        }
      },
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}